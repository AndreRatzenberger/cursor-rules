---
description: Controls development workflow with task tracking and management
globs: 
alwaysApply: true
---
# Development Workflow Management

Rule for tracking, documenting, and managing development tasks throughout their lifecycle.

<rule>
name: development_workflow
filters:
  - type: event
    pattern: "task_start"
  - type: event
    pattern: "task_complete"
  - type: command
    pattern: "task"
  - type: event
    pattern: "user_request"
  - type: event 
    pattern: "implementation_complete"

actions:
  - type: react
    conditions:
      - pattern: "task create|task_start"
    action: |
      # Create a new development task
      
      I'll create a new task with:
      - Unique task ID (TASK-YYYY-MM-DD-NN format)
      - Description section
      - Relevant specifications section
      - Acceptance criteria section
      - Metadata (ID, start date, end date, state)
      - Learnings section for capturing implementation insights
      
      The task will be stored in `.cursor/tasks/` with an Open (📝) status
      and added to the task index in `.cursor/TASKS.md`

  - type: react
    conditions:
      - pattern: "task done|task complete|task_complete"
    action: |
      # Mark a task as complete
      
      I'll update the specified task:
      - Change state to Done (✅)
      - Set end date to current date
      - Extract learnings to a separate file if any exist
      - Mark associated specs as completed
      - Update the task index in `.cursor/TASKS.md`
      
      If the task contains valuable learnings, they'll be saved to 
      `.cursor/learnings/` with proper cross-references

  - type: react
    conditions:
      - pattern: "task list|task_status"
    action: |
      # List all tasks with their status
      
      I'll generate a table showing:
      - Task ID
      - Current state (Open 📝, Active 🔄, or Done ✅)
      - Task description
      - Start date
      - End date (if completed)
      
      This provides a quick overview of all project tasks and their progress

  - type: react
    conditions:
      - pattern: "task start|task_active"
    action: |
      # Mark a task as active
      
      I'll update the specified task:
      - Change state from Open (📝) to Active (🔄)
      - Update the task index in `.cursor/TASKS.md`
      
      This indicates work has started on this task

  - type: react
    event: "user_request"
    conditions:
      - pattern: "implement|create|build|develop"
    action: |
      # Auto-create task when user requests implementation
      
      When you ask me to implement something, I'll automatically:
      - Create a new task with the implementation request as description
      - Look for related specifications to link to the task
      - Set the task state to Active (🔄)
      - Add acceptance criteria
      - Create a unique task ID
      - Add the task to the task index
      
      This ensures all implementation work is properly tracked

  - type: react
    event: "implementation_complete"
    action: |
      # Auto-complete task when implementation is finished
      
      When implementation is complete, I'll automatically:
      - Find the active task
      - Change state to Done (✅)
      - Set end date to current date
      - Extract and save any learnings
      - Mark associated specs as completed
      - Update the task index

  - type: suggest
    message: |
      ### Task Management System

      Your development tasks are automatically managed:

      **Task States:**
      - 📝 **Open** - Created but not started
      - 🔄 **Active** - Currently being worked on
      - ✅ **Done** - Completed

      **Commands:**
      - `task create` - Create a new task
      - `task start` - Mark a task as active
      - `task done` - Mark a task as complete
      - `task list` - Show all tasks with status

      **Automatic Behaviors:**
      - When you ask me to implement something → A task is automatically created
      - When implementation is complete → The task is automatically marked done

      Tasks are stored in `.cursor/tasks/` with detailed information including:
      - Description
      - Related specifications
      - Acceptance criteria
      - Start and end dates
      - State
      - Learnings captured during implementation

examples:
  - input: |
      task create "Implement user authentication flow"
    output: "Task created: TASK-2025-03-05-01 - Implement user authentication flow"

  - input: |
      task done TASK-2025-03-05-01
    output: "Task TASK-2025-03-05-01 marked as complete"

  - input: |
      task start TASK-2025-03-05-02
    output: "Task TASK-2025-03-05-02 marked as active"

  - input: |
      task list
    output: "Listing all tasks with their current status..."

metadata:
  priority: high
  version: 1.0
</rule>
