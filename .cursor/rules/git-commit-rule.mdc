---
description: Automatically commit changes made by CursorAI using conventional commits format
globs: 
alwaysApply: true
---

# Git Conventional Commits

Rule for automatically committing changes made by CursorAI using conventional commits format.

<rule>
name: conventional_commits
filters:
  - type: event
    pattern: "build_success"
  - type: event
    pattern: "test_success"
  - type: event
    pattern: "file_save"
  - type: file_change
    pattern: "*"

actions:
  - type: execute
    command: |
      # Check if this is a specs file
      if [[ "$FILE" == *".cursor/specs/"* || "$FILE" == *"SPECS.md"* ]]; then
        # Special handling for spec files
        CHANGE_TYPE="docs"
        SCOPE="specs"
        
        # Create a more detailed description for specs
        if [[ "$CHANGE_DESCRIPTION" == "" ]]; then
          # If no description provided, create one based on the filename
          SPEC_NAME=$(basename "$FILE" .md)
          CHANGE_DESCRIPTION="update specifications for $SPEC_NAME"
        fi
        
        # Commit the spec file
        git add "$FILE"
        git commit -m "$CHANGE_TYPE($SCOPE): $CHANGE_DESCRIPTION"
        echo "Committed spec file: $FILE"
        exit 0
      fi

      # Detect project type and run appropriate test command
      # First, check if tests need to be run (skip for certain file types)
      if [[ "$FILE" == *".md"* || "$FILE" == *".txt"* || "$FILE" == *".json"* || "$FILE" == *"README"* ]]; then
        # Documentation or configuration files don't need tests
        echo "Documentation or configuration file detected, skipping tests"
      else
        # Run tests based on project type
        if [ -f "package.json" ]; then
          # Node.js project
          echo "Detected Node.js project, running tests..."
          npm test
          TEST_RESULT=$?
        elif [ -f "Cargo.toml" ]; then
          # Rust project
          echo "Detected Rust project, running tests..."
          cargo test
          TEST_RESULT=$?
        elif [ -f "pom.xml" ]; then
          # Java/Maven project
          echo "Detected Java project, running tests..."
          mvn test
          TEST_RESULT=$?
        elif [ -f "requirements.txt" ] || [ -f "setup.py" ]; then
          # Python project
          echo "Detected Python project, running tests..."
          python -m pytest
          TEST_RESULT=$?
        else
          # Unknown project type, assume success
          echo "Unknown project type, assuming tests pass"
          TEST_RESULT=0
        fi
        
        # If tests failed, don't commit and notify
        if [ $TEST_RESULT -ne 0 ]; then
          echo "Tests failed! Please fix tests before committing."
          echo "Asking Cursor to fix the failing tests..."
          # Here we would integrate with Cursor to fix the tests
          # For now, we'll just exit with error
          exit 1
        fi
      fi
      
      # Regular processing for non-spec files
      # Extract the change type and scope from the changes
      CHANGE_TYPE=""
      case "$CHANGE_DESCRIPTION" in
        *"add"*|*"create"*|*"implement"*) CHANGE_TYPE="feat";;
        *"fix"*|*"correct"*|*"resolve"*) CHANGE_TYPE="fix";;
        *"refactor"*|*"restructure"*) CHANGE_TYPE="refactor";;
        *"test"*) CHANGE_TYPE="test";;
        *"doc"*|*"comment"*) CHANGE_TYPE="docs";;
        *"style"*|*"format"*) CHANGE_TYPE="style";;
        *"perf"*|*"optimize"*) CHANGE_TYPE="perf";;
        *) CHANGE_TYPE="chore";;
      esac

      # Extract scope from file path
      SCOPE=$(dirname "$FILE" | tr '/' '-')

      # Commit the changes
      git add "$FILE"
      git commit -m "$CHANGE_TYPE($SCOPE): $CHANGE_DESCRIPTION"

  - type: suggest
    message: |
      Changes should be committed using conventional commits format:

      Format: <type>(<scope>): <description>

      Types:
      - feat: A new feature
      - fix: A bug fix
      - docs: Documentation only changes
      - style: Changes that do not affect the meaning of the code
      - refactor: A code change that neither fixes a bug nor adds a feature
      - perf: A code change that improves performance
      - test: Adding missing tests or correcting existing tests
      - chore: Changes to the build process or auxiliary tools

      The scope should be derived from the file path or affected component.
      The description should be clear and concise, written in imperative mood.

  - type: react
    event: "test_failure"
    action: |
      # When tests fail, notify and attempt to fix
      echo "Tests failed. Attempting to fix the failing tests..."
      # The AI would analyze the test failures and fix them
      # For this rule, we'll just notify that this functionality exists

examples:
  - input: |
      # After adding a new function
      CHANGE_DESCRIPTION="add user authentication function"
      FILE="src/auth/login.ts"
    output: "feat(src-auth): add user authentication function"

  - input: |
      # After updating a spec file
      FILE=".cursor/specs/architecture.md"
      CHANGE_DESCRIPTION=""
    output: "docs(specs): update specifications for architecture"

metadata:
  priority: high
  version: 1.2
</rule>


<!--
 Copyright (c) 2025 Geoffrey Huntley <ghuntley@ghuntley.com>. All rights reserved.
 SPDX-License-Identifier: Proprietary
-->