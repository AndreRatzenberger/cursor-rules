---
description: Manages knowledge tracking and documentation organization
globs: 
alwaysApply: true
---
# Information and Knowledge Tracking

Rule for managing knowledge assets, tracking learnings, and organizing documentation.

<rule>
name: information_tracking
filters:
  - type: event
    pattern: "knowledge_capture"
  - type: event
    pattern: "file_create"
  - type: event
    pattern: "file_change"
  - type: command
    pattern: "learn"
  - type: command
    pattern: "document"
  - type: event
    pattern: "conversation_insight"
  - type: file_change
    pattern: ".cursor/docs/*"

actions:
  - type: react
    conditions:
      - pattern: "learn add|learning create"
    action: |
      # Create a new learning entry
      
      I'll create a structured learning document with:
      - Unique ID (format: LEARN-YYYY-MM-DD-NN)
      - Title and short description
      - Detailed description of the learning
      - Relevant code files, tasks, specifications, and documents
      - Date of capture
      - Keywords for easy retrieval
      
      The learning will be stored in `.cursor/learnings/` 
      and indexed in `.cursor/LEARNINGS.md`

  - type: react
    conditions:
      - pattern: "document add|document create|document detect"
    action: |
      # Register a document in the knowledge base
      
      I'll register the document by:
      - Storing a copy in `.cursor/docs/` if it's not already there
      - Creating a learning entry about this document
      - Adding the document to the documents index
      - Extracting key information from the document
      - Creating cross-references to related content
      
      This ensures all project documentation is centrally tracked
      and discoverable.

  - type: react
    event: "conversation_insight"
    action: |
      # Automatically capture important insights from our conversations
      
      When I identify valuable insights in our conversation, I'll:
      - Create a learning entry with the insight
      - Generate a unique ID for the learning
      - Categorize and tag the insight appropriately
      - Add context and relevant connections
      - Index the insight for future reference
      
      This ensures important information isn't lost.

  - type: react
    event: "file_change"
    conditions:
      - pattern: ".cursor/docs/.*"
    action: |
      # Automatically process new documents added to docs directory
      
      When a new document is added to `.cursor/docs/`, I'll:
      - Extract key information from the document
      - Create a learning entry linked to this document
      - Update the documents index
      - Identify related content
      - Generate appropriate metadata
      
      This ensures all documentation is properly integrated into
      the knowledge base.

  - type: suggest
    message: |
      ### Knowledge Management System

      Your project knowledge is automatically captured and organized:

      **Knowledge Types:**
      - **Learnings**: Important insights, solutions, and discoveries
      - **Documents**: Reference materials, specifications, and guides

      **Commands:**
      - `learn add "Title" "Short description" "Detailed content"` - Create a new learning entry
      - `document add "path/to/document"` - Register a document in the knowledge base

      **Automatic Behaviors:**
      - Important insights from our conversations are automatically captured
      - Documents in `.cursor/docs/` are automatically indexed
      - All knowledge assets receive unique IDs and cross-references

      Knowledge is centrally indexed in:
      - `.cursor/LEARNINGS.md` - Catalog of all captured knowledge
      - `.cursor/DOCUMENTS.md` - Registry of all documentation

      This system ensures valuable knowledge is preserved and discoverable.

examples:
  - input: |
      learn add "Authentication Best Practices" "Security patterns for JWT implementation" "When implementing JWT authentication, we discovered that using short expiration times (15min) with refresh tokens provides the best balance of security and user experience."
    output: "Learning created: LEARN-2025-03-05-01 - Authentication Best Practices"

  - input: |
      document add "architecture/system-design.md"
    output: "Document registered: architecture/system-design.md"

  - input: |
      # When AI detects an important insight in conversation
      I notice you're using a pattern that could be improved. By making this state immutable, you'll prevent a whole class of bugs.
    output: "Important insight automatically captured: LEARN-2025-03-05-03 - Immutable State Pattern Benefits"

metadata:
  priority: high
  version: 1.0
</rule>
