---
description: Extracts actionable insights from project knowledge
globs: 
alwaysApply: true
---
# Actionable Insights Engine

Rule for transforming project knowledge into actionable insights and recommendations.

<rule>
name: actionable_insights
filters:
  - type: command
    pattern: "insight"
  - type: event
    pattern: "implementation_complete"
  - type: event
    pattern: "task_complete"
  - type: event
    pattern: "code_review"
  - type: file_change
    pattern: "src/*"

actions:
  - type: react
    conditions:
      - pattern: "insight generate|generate insights"
    action: |
      # Generate actionable insights from project knowledge
      
      I'll analyze the knowledge base to create actionable insights:
      
      1. Extract best practices from existing learnings
      2. Identify recurring challenges and their solutions
      3. Detect patterns in successful implementations
      4. Find optimization opportunities based on performance learnings
      5. Suggest specific, actionable recommendations
      
      Unlike general knowledge extraction, these insights will be concrete, 
      actionable recommendations that can be directly applied.

  - type: react
    conditions:
      - pattern: "insight apply:(.*)"
    action: |
      # Apply specific insight to current code
      
      I'll apply the specified insight to the current code context:
      
      1. Retrieve the specific insight
      2. Analyze how it applies to the current code
      3. Generate recommended changes based on the insight
      4. Explain the rationale behind each recommendation
      5. Provide before/after comparisons
      
      This transforms abstract knowledge into concrete code improvements.

  - type: react
    event: "implementation_complete"
    action: |
      # Suggest improvements based on collected insights
      
      When implementation is completed, I'll:
      
      1. Analyze the implemented code
      2. Compare against insights database
      3. Identify potential improvements based on project learnings
      4. Suggest specific optimizations, patterns, or techniques
      5. Provide concrete examples of how to implement the suggestions
      
      This helps continuously improve code quality based on accumulated knowledge.

  - type: react
    event: "file_change"
    conditions:
      - pattern: "src/.*\\.(js|ts|jsx|tsx|py|rs|go|java|rb|cpp|c)$"
    action: |
      # Recommend relevant insights for changed files
      
      When source files change, I'll:
      
      1. Analyze the code context and changes
      2. Identify relevant insights from the knowledge base
      3. Suggest applicable best practices or optimizations
      4. Focus on concrete, actionable recommendations
      5. Prioritize insights specific to the current code domain
      
      This provides just-in-time knowledge application rather than 
      requiring manual knowledge lookup.

  - type: suggest
    message: |
      ### Actionable Insights System

      I can transform project knowledge into concrete, actionable recommendations:

      **Commands:**
      - `insight generate` - Extract actionable insights from knowledge base
      - `insight apply:ID` - Apply a specific insight to current code

      **Automatic Behaviors:**
      - When implementation completes → Suggest improvements based on insights
      - When files change → Recommend relevant insights for the context

      This system bridges the gap between accumulated knowledge and 
      practical code improvements, making learnings immediately useful.

examples:
  - input: |
      insight generate
    output: "Generated 5 actionable insights from project knowledge base, prioritized by impact."

  - input: |
      insight apply:INS-2025-03-05-02
    output: "Applied 'Optimized Database Query Pattern' insight to current code with 3 specific improvements."

metadata:
  priority: high
  version: 1.0
</rule>
