---
description: System for organizing, categorizing, and refining captured learnings
globs: 
alwaysApply: true
---

# Learning Refinement System

Rule for organizing, categorizing, and refining captured learnings to maximize their long-term value.

<rule>
name: learning_refinement
filters:
  - type: event
    pattern: "learning_create"
  - type: event
    pattern: "learning_update"
  - type: file_change
    pattern: ".cursor/learnings/*.md"
  - type: command
    pattern: "learn"
  - type: command
    pattern: "knowledge"

actions:
  - type: react
    conditions:
      - pattern: "learn categorize|learning categorize"
    action: |
      # Categorize and organize learnings
      
      I'll organize all learnings into meaningful categories:
      
      1. Analyze all learning content to identify topics and themes
      2. Categorize learnings into domains like:
         - Architecture, Performance, Security, DevOps
         - UX, API, Database, Testing
         - Frontend, Backend, Mobile, Tooling
         - Process, Bugs, Documentation
      3. Create category files in `.cursor/learning_categories/`
      4. Generate a categories index with links to all categorized learnings
      5. Identify uncategorized learnings for further review
      
      This makes knowledge more discoverable by organizing it into logical domains.

  - type: react
    conditions:
      - pattern: "learn refine:(.*)"
    action: |
      # Refine a specific learning to enhance its value
      
      I'll refine the specified learning by:
      
      1. Extracting the core learning ID from the command
      2. Creating an enhanced version with additional sections:
         - Keywords extracted from content
         - Key takeaways for quick reference
         - Potential applications of this knowledge
         - Related learnings on similar topics
         - Improved formatting and organization
      3. Preserving all original content while adding refinements
      4. Adding a "Last Refined" date
      
      This refinement process transforms basic learnings into comprehensive 
      knowledge assets.

  - type: react
    conditions:
      - pattern: "learn extract|knowledge extract"
    action: |
      # Extract patterns and valuable information from all learnings
      
      I'll analyze all learnings to identify patterns:
      
      1. Generate statistics on learning types and frequency
      2. Extract most frequently mentioned topics and terms
      3. Identify potential best practices across learnings
      4. Find recurring challenges and their solutions
      5. Highlight solution patterns that could be reused
      
      This extraction creates a "wisdom layer" that surfaces valuable 
      patterns across individual learnings.

  - type: react
    conditions:
      - pattern: "learn metrics|knowledge metrics"
    action: |
      # Generate metrics and insights about captured knowledge
      
      I'll analyze the knowledge base to provide metrics:
      
      1. Calculate overall knowledge metrics:
         - Total learnings and documents
         - Learnings per day/week/month
         - Word count and depth analysis
      2. Analyze knowledge capture trends over time
      3. Examine distribution by knowledge type and category
      4. Assess knowledge quality based on content metrics
      5. Provide recommendations to improve knowledge capture
      
      These metrics help track knowledge growth and identify improvement areas.

  - type: react
    event: "file_change"
    conditions:
      - pattern: ".cursor/learnings/.*\\.md$"
    action: |
      # Automatically enhance learning when created or updated
      
      When a learning file is created or updated, I'll:
      
      1. Check if the learning has all expected sections
      2. Add missing sections like short descriptions or keywords
      3. Generate keywords from content if missing
      4. Identify potentially related learnings
      5. Add cross-references to similar knowledge assets
      
      This automatic enhancement ensures consistent quality across all learnings.

  - type: suggest
    message: |
      ### Learning Refinement System

      Your captured knowledge can be refined and organized:

      **Commands:**
      - `learn categorize` - Organize learnings into meaningful categories
      - `learn refine:LEARN-ID` - Create an enhanced version of a specific learning
      - `learn extract` - Identify patterns and best practices across all learnings
      - `learn metrics` - Generate knowledge capture metrics and trends

      **Automatic Behaviors:**
      - Learnings are automatically enhanced with missing sections
      - Keywords are generated from content
      - Related learnings are identified and linked
      - Content categorization is maintained

      **Categories Include:**
      Architecture, Performance, Security, DevOps, UX, API, Database, Testing, 
      Frontend, Backend, Mobile, Tooling, Process, and more.

      This system transforms isolated learning notes into a rich, interconnected 
      knowledge base for your project.

examples:
  - input: |
      learn categorize
    output: "Learning categorization complete. Categories index created at .cursor/learning_categories/CATEGORIES.md"

  - input: |
      learn refine:LEARN-2025-03-05-01
    output: "Learning refined. Enhanced version created at .cursor/learnings/LEARN-2025-03-05-01_refined.md"

  - input: |
      learn extract
    output: "Knowledge patterns extracted. Report available at .cursor/output/knowledge_extraction_20250305_123456.md"

  - input: |
      learn metrics
    output: "Knowledge metrics generated. Report available at .cursor/output/knowledge_metrics_20250305_123456.md"

metadata:
  priority: high
  version: 1.0
</rule>
