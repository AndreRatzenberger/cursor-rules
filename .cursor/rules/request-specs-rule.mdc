---
description: requirements engineering - automatic spec file creation
globs: 
alwaysApply: true
---

# User Request Specifications Recorder

Rule for automatically creating and organizing specification files based on user requests.

<rule>
name: request_specs_recorder
filters:
  - type: event
    pattern: "user_request"
  - type: command
    pattern: "spec"
  - type: command
    pattern: "requirement"

actions:
  - type: react
    event: "user_request"
    conditions:
      - pattern: "implement|create|build|develop"
    action: |
      # Create specifications before implementation
      
      When you ask me to implement something, I'll:
      
      1. Check if specifications exist for the requested feature
      2. If specifications don't exist:
         - Create a new specification file in `.cursor/specs/`
         - Organize specs by domain/component
         - Define clear requirements as checkable items
         - Add acceptance criteria
         - Link to related specifications if applicable
      3. Update the specifications index `SPECS.md`
      
      This ensures all implemented features have proper specifications 
      before development begins.

  - type: react
    conditions:
      - pattern: "spec create|create spec"
    action: |
      # Explicitly create a new specification
      
      I'll create a new specification file:
      
      1. Identify the appropriate domain for the specification
      2. Create the spec file in `.cursor/specs/[domain]/[name].md`
      3. Structure the spec with:
         - Clear title and description
         - Numbered requirements as checkable items
         - Acceptance criteria
         - Notes or context
      4. Update the specifications index `SPECS.md`
      
      This creates a formal specification that can be referenced during development.

  - type: react
    conditions:
      - pattern: "spec update|update spec"
    action: |
      # Update an existing specification
      
      I'll update the specified specification:
      
      1. Find the existing specification file
      2. Add or modify requirements as needed
      3. Update the completion status of requirements
      4. Refresh any related information
      5. Update the specifications index if necessary
      
      This ensures specifications stay current as requirements evolve.

  - type: suggest
    message: |
      ### Specification-First Development

      I follow a specification-first approach:

      - Before implementing features, I create detailed specifications
      - Specifications are stored in `.cursor/specs/` organized by domain
      - All specifications are indexed in `SPECS.md` for easy reference
      
      **Commands:**
      - `spec create "Title"` - Create a new specification file
      - `spec update "specs/domain/name.md"` - Update an existing specification
      
      **Automatic Behavior:**
      - When you ask me to implement something without specifications, I'll create them first
      - I'll remind you if implementation is requested without corresponding specifications
      
      This approach ensures that all development is driven by clear, documented requirements.

examples:
  - input: |
      spec create "User Authentication System"
    output: "Specification created at .cursor/specs/auth/user_authentication_system.md and added to index."

  - input: |
      Implement a file upload feature
    output: "Before implementation, I'll create specifications for the file upload feature."

  - input: |
      spec update "specs/api/endpoints.md"
    output: "Updated specifications at .cursor/specs/api/endpoints.md with latest requirements."

metadata:
  priority: high
  version: 1.0
</rule>
