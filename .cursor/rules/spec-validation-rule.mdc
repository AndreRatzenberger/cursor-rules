---
description: Validates specifications against implementations and ensures quality standards
globs: 
alwaysApply: true
---

# Specification Validation

Rule for automatically validating specifications against implementations and ensuring specification quality.

<rule>
name: specification_validation
filters:
  - type: event
    pattern: "spec_create"
  - type: event
    pattern: "spec_update"
  - type: file_change
    pattern: ".cursor/specs/*.md"
  - type: command
    pattern: "spec"
  - type: command
    pattern: "validate"

actions:
  - type: react
    conditions:
      - pattern: "spec validate|validate spec"
    action: |
      # Validate a specification against quality standards and implementation
      
      I'll perform a comprehensive validation of the specification:
      
      1. Analyze specification quality:
         - Check for vague terms (should, would, could, etc.)
         - Identify non-atomic requirements (multiple requirements in one)
         - Verify all required sections exist (description, requirements, acceptance criteria)
         - Assess overall specification clarity and completeness
      
      2. Validate implementation status:
         - Trace requirements to actual code
         - Check if completed requirements have corresponding implementations
         - Identify discrepancies between spec completion status and actual code
         - Calculate implementation coverage percentage
      
      3. Review test coverage:
         - Look for test files related to this specification
         - Verify test existence for key requirements
         - Identify gaps in test coverage
      
      4. Provide actionable recommendations:
         - Suggest quality improvements
         - Highlight missing implementations
         - Recommend test additions
      
      The validation report will be saved to `.cursor/output/spec_validation_[filename]_[timestamp].md`

  - type: react
    conditions:
      - pattern: "spec format|format spec"
    action: |
      # Format a specification to improve its quality
      
      I'll improve the specification format:
      
      1. Ensure proper structure:
         - Add title if missing
         - Create standard sections (Description, Requirements, Acceptance Criteria, Notes)
         - Format requirements as proper checkboxes
      
      2. Improve requirement quality:
         - Split non-atomic requirements (containing "and")
         - Convert vague requirements to specific ones
         - Ensure consistent formatting
      
      3. Backup the original specification
      
      This improves specification quality while preserving all original content.

  - type: react
    conditions:
      - pattern: "spec completeness|completeness check"
    action: |
      # Check specification completeness across the project
      
      I'll analyze specification coverage across the entire project:
      
      1. Generate overall statistics:
         - Total specification files
         - Total requirements and completion rate
         - Quality assessment
      
      2. Examine per-specification metrics:
         - Requirements count and completion
         - Quality scores
         - Implementation status
      
      3. Analyze source code coverage:
         - Check which directories/components have specification coverage
         - Identify code areas lacking specifications
         - Calculate coverage percentages
      
      4. Provide recommendations:
         - Areas needing specification improvement
         - Low-quality specifications to address
         - Missing specifications to create
      
      The completeness report will be saved to `.cursor/output/spec_completeness_[timestamp].md`

  - type: react
    event: "file_change"
    conditions:
      - pattern: ".cursor/specs/.*\\.md$"
    action: |
      # Automatically validate specifications when they change
      
      When a specification file changes, I'll:
      
      1. Perform a basic quality check:
         - Look for vague terms
         - Check for missing sections
         - Identify potential quality issues
      
      2. Update the specifications index:
         - Add new specifications to the index
         - Update completion percentages
         - Refresh requirement counts
      
      3. Notify about any quality issues found
      
      This ensures specifications maintain high quality and are properly indexed.

  - type: suggest
    message: |
      ### Specification Validation System

      Specifications are automatically validated to ensure quality and completeness:

      **Commands:**
      - `spec validate [path/to/spec.md]` - Detailed validation of a specification
      - `spec format [path/to/spec.md]` - Automatically improve specification formatting
      - `spec completeness` - Generate project-wide specification coverage report

      **Validation Checks:**
      - Quality: Vague language, atomic requirements, complete sections
      - Implementation: Tracing requirements to actual code
      - Completeness: Ensuring all code areas have specification coverage
      - Test Coverage: Verifying tests exist for requirements

      **Automatic Behaviors:**
      - Specifications are validated when changed
      - The specifications index is kept updated
      - Quality issues trigger suggestions for improvement

      This system helps maintain high-quality specifications that drive accurate implementations.

examples:
  - input: |
      spec validate .cursor/specs/auth/login.md
    output: "Specification validation report generated at .cursor/output/spec_validation_login_20250305_123456.md"

  - input: |
      spec format .cursor/specs/api/endpoints.md
    output: "Specification formatted and saved to .cursor/specs/api/endpoints.md"

  - input: |
      spec completeness
    output: "Specification completeness report generated at .cursor/output/spec_completeness_20250305_123456.md"

metadata:
  priority: high
  version: 1.0
</rule>